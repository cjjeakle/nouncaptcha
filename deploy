#!/bin/bash
#Fail should any operation fail
set -e
set -o pipefail

#Global App Configuration
declare APPNAME="nouncaptcha";
declare APPUUID="bcbc0664a58044f98960d7de2a4b13a7";
declare APPUSER="${APPNAME}"
declare APPDB="${APPNAME}"
declare RUNFILE="run";
declare PROD_RUNFILE="runprod"

function user_exists {
    if [ -n "$(getent passwd $1)" ];
    then
        return 0 #true
    fi
    return 1 #false
}

function db_exists {
    if [ `builtin type -p psql` ];
    then
        if sudo -u postgres psql $1 -c '' 2>/dev/null;
        then
            return 0; #true
        fi
    fi
    return 1; #false
}

function display_uninstall_warnings {
    if user_exists $APPUSER;
    then
        echo "The user named \"${APPUSER}\" will be deleted! (type 'continue' to continue, any other input will exit)"
        read input
        if [ "${input}" != "continue" ];
        then
            exit;
        fi
    fi

    if db_exists $APPDB;
    then 
        echo "The database named \"${APPDB}\" will be dropped! (type 'continue' to continue, any other input will exit)"
        read input
        if [ "${input}" != "continue" ];
        then
            exit;
        fi
    fi
}

function uninstall {
    echo "##########Deleting the App's User (${APPUSER})##########"
    echo "############################################################"
    if [ -n "$(getent passwd $APPUSER)" ]
    then
        userdel ${APPUSER}
    else
        echo "The app's user could not be found"
    fi

    echo "##########Dropping any ${APPDB} postgres data##########"
    echo "############################################################"
    if [ `builtin type -p psql` ];
    then
        echo "DROP DATABASE ${APPDB}; DROP USER ${APPUSER};" | sudo -u postgres psql
    else
        echo "Postgres does not appear to be installed"
    fi

    echo "##########Removing any installed node libraries##########"
    echo "############################################################"
    if [ -d node_modules ];
    then
        rm -rf node_modules
    else
        echo "No node modules installed, nothing removed"
    fi

    echo "##########Removing runfile (${RUNFILE})##########"
    echo "############################################################"
    if [ -f ${RUNFILE} ];
    then
        rm -f ${RUNFILE}
    else
        echo "No runfile found, nothing removed"
    fi

    echo "##########Removing prod runfile (${PROD_RUNFILE})##########"
    echo "############################################################"
    if [ -f ${PROD_RUNFILE} ];
    then
        rm -f ${PROD_RUNFILE}
    else
        echo "No prod runfile found, nothing removed"
    fi
}

# Takes one optional argument, which specifies the preferred port to run on (default 4000)
function install {
    #File names
    declare APPEXE="server.js"; #The point of entry for the app
    #Port config
    declare PORT_VARNAME="NOUNCAPTCHA_PORT";
    declare -i PORT=4000;
    #DB config
    declare PASSWORD="$(cat /dev/urandom | tr -dc '[:alnum:]' | head -c 32)"; #Generate a strong alphanumeric password from random input
    declare DB_URL_VARNAME="NOUNCAPTCHA_DB_URL";
    declare DB_URL="postgres://nouncaptcha:${PASSWORD}@localhost:5432/nouncaptcha";
    declare DB_FILE="db_stuff/basic_database.dump";

    if [ "$1" -ne 0 ];
    then 
        PORT=${PORT_ARG};
    fi

    echo "##########Proactively checking for potential issues##########"
    echo "############################################################"
    if user_exists $APPUSER;
    then
        echo "The app's runtime context, a user named \"${APPUSER}\", already exists, the install script will not work!";
        exit;
    fi
    if db_exists $APPDB;
    then 
        echo "A database named \"${APPDB}\" already exists, the install script will not work!";
        exit;
    fi

    echo "##########Installing apt dependencies##########"
    echo "############################################################"
    apt-get install nodejs
    apt-get install postgresql postgresql-contrib

    echo "##########Installing node libraries##########"
    echo "############################################################"
    npm install
    npm install -g forever

    echo "##########Creating the App's User Context (${APPUSER})##########"
    echo "############################################################"
    useradd ${APPUSER}
    echo ${APPUSER}:${PASSWORD} | chpasswd

    echo "##########Configuring Postgres##########"
    echo "############################################################"
    sudo -u postgres createuser ${APPUSER} --connection-limit=1 --no-createdb --no-createrole --no-superuser
    sudo -u postgres createdb $APPDB
    echo "ALTER USER ${APPUSER} WITH PASSWORD '${PASSWORD}'" | sudo -u postgres psql $APPDB
    echo "REVOKE CONNECT ON DATABASE ${APPDB} FROM PUBLIC; GRANT CONNECT ON DATABASE ${APPDB} TO ${APPUSER};" | sudo -u postgres psql $APPDB
    sudo -u postgres psql $APPDB < $DB_FILE
    echo "GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA public TO ${APPUSER};" | sudo -u postgres psql $APPDB

    echo "##########Creating the app's runfile (${RUNFILE})##########"
    echo "############################################################"
    #Overwrite anything in ${RUNFILE}, or create it.
    echo "#!/bin/sh
    echo \"${PASSWORD}\" | su ${APPUSER} -S
    export ${PORT_VARNAME}=${PORT};
    export ${DB_URL_VARNAME}=\"${DB_URL}\";
    declare SILENT_MODE=false;
    while getopts 'p:sh' option
    do
        case \$option in
            p ) export ${PORT_VARNAME}=\${OPTARG}; ;;
            s ) SILENT_MODE=true; ;;
            h ) echo \"Help (-h): See readme.md for script arguments and other info.\"; exit; ;;
        esac
    done
    if \$SILENT_MODE
    then
        forever -w ${APPEXE} > /dev/null
    else
        forever -w ${APPEXE}
    fi" > ${RUNFILE}

    echo "##########Creating the app's production runfile (${PROD_RUNFILE})##########"
    echo "############################################################"
    #Use the default runfile to overwrite anything in ${PROD_RUNFILE}, or create it. Then inset the prod env var.
    cat ${RUNFILE} > ${PROD_RUNFILE}
    sed -i '2 a export NODE_ENV=\"production\";' ${PROD_RUNFILE};
}

#Script command-line options
declare RUN_UNINSTALL=false;
declare RUN_INSTALL=false;
declare -i PORT_ARG=0;
declare ENABLE_UNINSTALL_WARNINGS=true;

while getopts 'uip:zh' option
do
    case $option in
        u ) RUN_UNINSTALL=true; ;;
        i ) RUN_INSTALL=true; ;;
        p ) PORT_ARG=${OPTARG}; ;;
        z ) ENABLE_UNINSTALL_WARNINGS=false; ;;
        h ) echo "Help (-h): See readme.md for script arguments and other info."; exit; ;;
    esac
done

if $RUN_UNINSTALL
then
    if $ENABLE_UNINSTALL_WARNINGS
    then
        display_uninstall_warnings
    fi
    uninstall; 
fi

if $RUN_INSTALL
then
    install $PORT_ARG; 
fi
